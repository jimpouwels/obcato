<?php	// No direct access	defined('_ACCESS') or die;		require_once "dao/image_dao.php";	require_once "dao/settings_dao.php";	require_once "core/http/module_request_handler.php";	require_once "libraries/validators/form_validator.php";	require_once "libraries/handlers/form_handler.php";	require_once "libraries/system/notifications.php";	require_once "libraries/utilities/file_utility.php";		class ImagePreHandler extends ModuleRequestHandler {		private static $IMAGE_QUERYSTRING_KEY = "image";		private static $TITLE_SEARCH_QUERYSTRING_KEY = "s_title";		private static $FILENAME_SEARCH_QUERYSTRING_KEY = "s_filename";		private static $LABEL_SEARCH_QUERYSTRING_KEY = "s_label";			private $_image_dao;		private $_settings_dao;		private $_current_image;			public function __construct() {			$this->_image_dao = ImageDao::getInstance();			$this->_settings_dao = SettingsDao::getInstance();		}			public function handleGet() {		}				public function handlePost() {			if ($this->isUpdateImageAction()) {				$this->updateImage($this->getImageIdFromPostRequest());			} else if ($this->isDeleteImageAction()) {				$this->deleteImage($this->getImageIdFromPostRequest());			} else if ($this->isAddImageAction()) {				$this->addImage();			}		}				public function getCurrentSearchTitleFromGetRequest() {			return $this->getQueryStringValueFromGetRequest(self::$TITLE_SEARCH_QUERYSTRING_KEY);		}				public function getCurrentSearchFilenameFromGetRequest() {			return $this->getQueryStringValueFromGetRequest(self::$FILENAME_SEARCH_QUERYSTRING_KEY);		}				public function getCurrentSearchLabelFromGetRequest() {			return $this->getQueryStringValueFromGetRequest(self::$LABEL_SEARCH_QUERYSTRING_KEY);		}				public function getCurrentImageFromGetRequest() {			$current_image = null;			if (isset($_GET[self::$IMAGE_QUERYSTRING_KEY]) && $_GET[self::$IMAGE_QUERYSTRING_KEY] != "") {				$current_image = $this->_image_dao->getImage($_GET[self::$IMAGE_QUERYSTRING_KEY]);			}			return $current_image;		}					private function deleteImage($image_id) {			$image = $this->_image_dao->getImage($image_id);			$this->_image_dao->deleteImage($image);			Notifications::setSuccessMessage("Afbeelding succesvol verwijderd");			header("Location: /admin/index.php");			exit();		}				private function addImage() {			$new_image = $this->_image_dao->createImage();			Notifications::setSuccessMessage("Afbeelding succesvol aangemaakt");			header('Location: /admin/index.php?image=' . $new_image->getId());			exit();		}				private function updateImage($image_id) {			global $errors;						$title = FormValidator::checkEmpty('image_title', 'Titel is verplicht');			$published = FormHandler::getFieldValue('image_published');			$selected_labels = FormHandler::getFieldValue('image_select_labels');			$current_image = $this->_image_dao->getImage($image_id);					if (count($errors) == 0) {				$current_image->setTitle($title);									$published_value = 0;				if ($published == 'on') {					$published_value = 1;				}								if (!is_null($selected_labels) && count($selected_labels) > 0) {					$existing_labels = $this->_image_dao->getLabelsForImage($current_image->getId());					foreach ($selected_labels as $selected_label_id) {						if ($this->isLabelAlreadyAdded($selected_label_id, $existing_labels)) {							$this->_image_dao->addLabelToImage($selected_label_id, $current_image);						}					}				}								$image_labels = $this->_image_dao->getLabelsForImage($current_image->getId());				foreach ($image_labels as $image_label) {					if (isset($_POST["label_" . $image_label->getId() . "_delete"])) {						$this->_image_dao->deleteLabelForImage($image_label->getId(), $current_image);					}				}								// handle the image				$upload_dir = Settings::find()->getUploadDir();				if (is_uploaded_file($_FILES['image_file']['tmp_name'])) {					// first delete the old file					FileUtility::deleteImage($current_image, $upload_dir);										$new_file_name = "UPLIMG-00" . $current_image->getId() . '00' . $_FILES['image_file']['name'];					rename($_FILES['image_file']['tmp_name'], $upload_dir . "/" . $new_file_name);										$current_image->setFileName($new_file_name);									$thumb_file_name = "THUMB-" . $new_file_name;										FileUtility::saveThumb($new_file_name, $upload_dir, $thumb_file_name, 50, 50);										$current_image->setThumbFileName($thumb_file_name);				}								$current_image->setPublished($published_value);				$this->_image_dao->updateImage($current_image);								Notifications::setSuccessMessage("Afbeelding succesvol opgeslagen");			} else {				Notifications::setFailedMessage("Afbeelding niet opgeslagen, verwerk de fouten");			}		}				private function isLabelAlreadyAdded($selected_label_id, $existing_labels) {			return $selected_label_id != -1 && is_null($existing_labels) || count($existing_labels) == 0 || 				!in_array($this->_image_dao->getLabel($selected_label_id), $existing_labels);		}				private function getImageIdFromPostRequest() {			return $_POST["image_id"];		}				private function isAddImageAction() {			return isset($_POST["add_image_action"]) && $_POST["add_image_action"] == "add_image";		}				private function isDeleteImageAction() {			return isset($_POST['action']) && $_POST["action"] == "delete_image" && isset($_POST["image_id"]);		}				private function isUpdateImageAction() {			return isset($_POST['action']) && $_POST["action"] == "update_image" && isset($_POST["image_id"]);		}				private function getQueryStringValueFromGetRequest($query_string_key) {			$value = null;			if (isset($_GET[$query_string_key]) && $_GET[$query_string_key] != "") {				$value = $_GET[$query_string_key];			}			return $value;		}			}	?>