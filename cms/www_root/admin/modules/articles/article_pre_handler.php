<?php	// No direct access	defined('_ACCESS') or die;		require_once FRONTEND_REQUEST . "view/request_handlers/module_request_handler.php";	require_once FRONTEND_REQUEST . "database/dao/article_dao.php";	require_once FRONTEND_REQUEST . "database/dao/element_dao.php";	require_once FRONTEND_REQUEST . "database/dao/authorization_dao.php";	require_once FRONTEND_REQUEST . "modules/articles/article_form.php";		class ArticlePreHandler extends ModuleRequestHandler {		private static $ARTICLE_ID_POST = "element_holder_id";		private static $ARTICLE_ID_GET = "article";		private $_current_article;		private $_element_dao;		private $_article_dao;				public function __construct() {			$this->_article_dao = ArticleDao::getInstance();			$this->_element_dao = ElementDao::getInstance();		}			public function handleGet() {			$this->_current_article = $this->getArticleFromGetRequest();		}				public function handlePost() {			$this->_current_article = $this->getArticleFromPostRequest();			if ($this->isUpdateArticleAction())				$this->updateArticle();			else if ($this->isDeleteArticleAction())				$this->deleteArticle();			else if ($this->isAddArticleAction())				$this->addArticle();		}				public function getCurrentArticle() {			return $this->_current_article;		}				private function updateArticle() {			$article_form = new ArticleForm($this->_current_article);			try {				$article_form->loadFields();				$this->_element_dao->updateElementOrder($article_form->getElementOrder(), $this->_current_article);				$this->_article_dao->updateArticle($this->_current_article);				$this->updateSelectedTerms($article_form->getSelectedTerms());				$this->deleteSelectedTerms();				Notifications::setSuccessMessage("Artikel succesvol opgeslagen");			} catch (FormException $e) {				Notifications::setFailedMessage("Artikel niet opgeslagen, verwerk de fouten");			}		}				private function addArticle() {			$new_article = $this->_article_dao->createArticle();			Notifications::setSuccessMessage("Artikel succesvol aangemaakt");			header('Location: /admin/index.php?article=' . $new_article->getId());			exit();		}				private function deleteArticle() {			$this->_article_dao->deleteArticle($this->_current_article);						Notifications::setSuccessMessage("Artikel succesvol verwijderd");			header("Location: /admin/index.php");			exit();		}				private function updateSelectedTerms($selected_terms) {			if (count($selected_terms) == 0) return;			$existing_terms = $this->_current_article->getTerms();			foreach ($selected_terms as $selected_term_id) {				if (!$this->termAlreadyExists($selected_term_id, $existing_terms)) {					$this->_article_dao->addTermToArticle($selected_term_id, $this->_current_article);				}			}		}				private function deleteSelectedTerms() {			$article_terms = $this->_article_dao->getTermsForArticle($this->_current_article->getId());			foreach ($article_terms as $article_term) {				if (isset($_POST["term_" . $this->_current_article->getId() . "_" . $article_term->getId() . "_delete"])) {					$this->_article_dao->deleteTermFromArticle($article_term->getId(), $this->_current_article);				}			}		}				private function getArticleFromGetRequest() {			if (isset($_GET[self::$ARTICLE_ID_GET]))				return $this->getArticleFromDatabase($_GET[self::$ARTICLE_ID_GET]);		}				private function getArticleFromPostRequest() {			return $this->getArticleFromDatabase($_POST[self::$ARTICLE_ID_POST]);		}				private function getArticleFromDatabase($article_id) {				return $this->_article_dao->getArticle($article_id);		}				private function termAlreadyExists($term_id, $existing_terms) {			foreach ($existing_terms as $existing_term) {				if ($existing_term->getId() == $term_id) {					return true;				}			}			return false;		}				private function isUpdateArticleAction() {			return isset($_POST["action"]) && $_POST["action"] == "update_element_holder";		}				private function isDeleteArticleAction() {			return isset($_POST["action"]) && $_POST["action"] == "delete_article";		}				private function isAddArticleAction() {			return isset($_POST["add_article_action"]);		}			}	?>